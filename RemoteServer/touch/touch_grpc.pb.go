// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package touch

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TouchClient is the client API for Touch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TouchClient interface {
	TouchReq(ctx context.Context, in *TouchRequest, opts ...grpc.CallOption) (Touch_TouchReqClient, error)
}

type touchClient struct {
	cc grpc.ClientConnInterface
}

func NewTouchClient(cc grpc.ClientConnInterface) TouchClient {
	return &touchClient{cc}
}

func (c *touchClient) TouchReq(ctx context.Context, in *TouchRequest, opts ...grpc.CallOption) (Touch_TouchReqClient, error) {
	stream, err := c.cc.NewStream(ctx, &Touch_ServiceDesc.Streams[0], "/touch.Touch/TouchReq", opts...)
	if err != nil {
		return nil, err
	}
	x := &touchTouchReqClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Touch_TouchReqClient interface {
	Recv() (*TouchReply, error)
	grpc.ClientStream
}

type touchTouchReqClient struct {
	grpc.ClientStream
}

func (x *touchTouchReqClient) Recv() (*TouchReply, error) {
	m := new(TouchReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TouchServer is the server API for Touch service.
// All implementations must embed UnimplementedTouchServer
// for forward compatibility
type TouchServer interface {
	TouchReq(*TouchRequest, Touch_TouchReqServer) error
	mustEmbedUnimplementedTouchServer()
}

// UnimplementedTouchServer must be embedded to have forward compatible implementations.
type UnimplementedTouchServer struct {
}

func (UnimplementedTouchServer) TouchReq(*TouchRequest, Touch_TouchReqServer) error {
	return status.Errorf(codes.Unimplemented, "method TouchReq not implemented")
}
func (UnimplementedTouchServer) mustEmbedUnimplementedTouchServer() {}

// UnsafeTouchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TouchServer will
// result in compilation errors.
type UnsafeTouchServer interface {
	mustEmbedUnimplementedTouchServer()
}

func RegisterTouchServer(s grpc.ServiceRegistrar, srv TouchServer) {
	s.RegisterService(&Touch_ServiceDesc, srv)
}

func _Touch_TouchReq_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TouchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TouchServer).TouchReq(m, &touchTouchReqServer{stream})
}

type Touch_TouchReqServer interface {
	Send(*TouchReply) error
	grpc.ServerStream
}

type touchTouchReqServer struct {
	grpc.ServerStream
}

func (x *touchTouchReqServer) Send(m *TouchReply) error {
	return x.ServerStream.SendMsg(m)
}

// Touch_ServiceDesc is the grpc.ServiceDesc for Touch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Touch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "touch.Touch",
	HandlerType: (*TouchServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TouchReq",
			Handler:       _Touch_TouchReq_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "touch.proto",
}
