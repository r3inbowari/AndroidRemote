// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JPEGClient is the client API for JPEG service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JPEGClient interface {
	SendJPEG(ctx context.Context, opts ...grpc.CallOption) (JPEG_SendJPEGClient, error)
}

type jPEGClient struct {
	cc grpc.ClientConnInterface
}

func NewJPEGClient(cc grpc.ClientConnInterface) JPEGClient {
	return &jPEGClient{cc}
}

func (c *jPEGClient) SendJPEG(ctx context.Context, opts ...grpc.CallOption) (JPEG_SendJPEGClient, error) {
	stream, err := c.cc.NewStream(ctx, &JPEG_ServiceDesc.Streams[0], "/pics.JPEG/SendJPEG", opts...)
	if err != nil {
		return nil, err
	}
	x := &jPEGSendJPEGClient{stream}
	return x, nil
}

type JPEG_SendJPEGClient interface {
	Send(*JPEGRequest) error
	Recv() (*JPEGReply, error)
	grpc.ClientStream
}

type jPEGSendJPEGClient struct {
	grpc.ClientStream
}

func (x *jPEGSendJPEGClient) Send(m *JPEGRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jPEGSendJPEGClient) Recv() (*JPEGReply, error) {
	m := new(JPEGReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JPEGServer is the server API for JPEG service.
// All implementations must embed UnimplementedJPEGServer
// for forward compatibility
type JPEGServer interface {
	SendJPEG(JPEG_SendJPEGServer) error
	mustEmbedUnimplementedJPEGServer()
}

// UnimplementedJPEGServer must be embedded to have forward compatible implementations.
type UnimplementedJPEGServer struct {
}

func (UnimplementedJPEGServer) SendJPEG(JPEG_SendJPEGServer) error {
	return status.Errorf(codes.Unimplemented, "method SendJPEG not implemented")
}
func (UnimplementedJPEGServer) mustEmbedUnimplementedJPEGServer() {}

// UnsafeJPEGServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JPEGServer will
// result in compilation errors.
type UnsafeJPEGServer interface {
	mustEmbedUnimplementedJPEGServer()
}

func RegisterJPEGServer(s grpc.ServiceRegistrar, srv JPEGServer) {
	s.RegisterService(&JPEG_ServiceDesc, srv)
}

func _JPEG_SendJPEG_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JPEGServer).SendJPEG(&jPEGSendJPEGServer{stream})
}

type JPEG_SendJPEGServer interface {
	Send(*JPEGReply) error
	Recv() (*JPEGRequest, error)
	grpc.ServerStream
}

type jPEGSendJPEGServer struct {
	grpc.ServerStream
}

func (x *jPEGSendJPEGServer) Send(m *JPEGReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jPEGSendJPEGServer) Recv() (*JPEGRequest, error) {
	m := new(JPEGRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JPEG_ServiceDesc is the grpc.ServiceDesc for JPEG service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JPEG_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pics.JPEG",
	HandlerType: (*JPEGServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendJPEG",
			Handler:       _JPEG_SendJPEG_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "jpeg.proto",
}
